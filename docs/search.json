[
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "Our Course Project",
    "section": "",
    "text": "I’m honored to be a member of the [data_criminals] project team.\nBelow, you’ll find a brief summary of our project. To access a detailed project description, please go to https://emu-hacettepe-analytics.github.io/emu430-fall2023-team-data_criminals/.\nSummary\nThe dataset, sourced from TUIK, covers convicts received into prison across Turkey between 1990 and 2020. It includes information the educational status of the convicts. We chose this dataset because of its potential to unveil the connection between educational background and criminal behavior.\nOur objectives include:\nWe will understand the relationship between education and crime. By analyzing the data set, we will gain insights into how educational attainment influences incarceration. We will develop proficiency in data manipulation and analysis using R. We will learn how to import, clean, transform, and visualize data using R’s built-in functions and libraries. We enhance critical thinking and problem-solving skills. We will apply their knowledge of R programming to draw meaningful conclusions from the data.\nOur preliminary plans include:\nWe will import the data set into R and perform any necessary cleaning and data preparation steps. We will visualize the data using various plots and charts to gain an initial understanding of the distribution of variables and the relationships between them. We will interpret the results of the analysis and communicate the findings in a clear and concise manner. We have two main data sources. One of them comes from https://biruni.tuik.gov.tr/ web site. Thanks to this site we can contact a data base which take necessary command according to data base’s variable than turns a file which is excel format. Other one is an excel file which include information about crime types and number of convicts according to crime type. After some arrangement (cleaning, combining etc.) we collected our data in a excel file.\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to My Analytics Lab",
    "section": "",
    "text": "Hello! My name is Mehmet Akif Özbakır.\nThis is my personal webpage.\nPlease stay tuned to follow my works on data analytics, blog posts, and more.\nThis is my template.\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments/assignment-2.html",
    "href": "assignments/assignment-2.html",
    "title": "Assignment 2",
    "section": "",
    "text": "Analysis of Turkish Movies (IMBD)\nThe movies have been filtered, and their URLs have been saved.\n\n\nCode\n# searches between  01/01/2010-31/12/2023\nurl_1 &lt;- \"https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250\" \n\n# searches before 31/12/2009\nurl_2 &lt;- \"https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\n\ncombined_url &lt;- c(url_1, url_2)\n\n\nNecessary Packages\n\nCode\nknitr::opts_chunk$set(warning = FALSE)\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(ggthemes)\n\nWeb-Scrapping\nTurkish movies with a minimum of 2500 votes have been filtered.\n\n\nCode\ntitle &lt;- c()\nrelease_year &lt;- c()\nduration &lt;- c()\nrating &lt;- c()\nvote &lt;- c()\nfor (url in combined_url) {\n  Html &lt;- read_html(url)\n  \n  title_names &lt;- Html |&gt; html_nodes('.ipc-title__text')\n  title_names &lt;- html_text(title_names)\n  title_names &lt;- tail(head(title_names,-1),-1)\n  title_names &lt;- str_split(title_names, \" \", n=2)\n  title_names &lt;- unlist(lapply(title_names, function(x) {x[2]}))\n  title &lt;- append(title,title_names)\n  \n  years &lt;- Html |&gt; html_nodes('.sc-43986a27-7.dBkaPT.dli-title-metadata')\n  years &lt;- html_text(years)\n  years &lt;- unlist(lapply(years, function(years){\n           strtrim(years, 4)}))\n  release_year &lt;- append(release_year, as.numeric(years))\n  \n  durations &lt;- Html |&gt; html_nodes('.sc-43986a27-7.dBkaPT.dli-title-metadata')\n  durations &lt;- html_text(durations)\n  durations &lt;- unlist(lapply(durations, function(durations){\n           str_extract(durations, \"\\\\d+h( \\\\d+m)?|\\\\d+m|\\\\d+\") |&gt; str_extract(\"(?&lt;=^.{4}).*\")}))\n  convert_to_minutes &lt;- function(duration) {\n  hours &lt;- as.numeric(str_extract(duration, \"\\\\d+(?=h)\"))\n  minutes &lt;- as.numeric(str_extract(duration, \"\\\\d+(?=m)\"))\n  total_minutes &lt;- ifelse(is.na(hours),0, hours) * 60 + ifelse(is.na(minutes), 0, minutes)\n  return(total_minutes)\n}\n  durations &lt;- unlist(lapply(durations, convert_to_minutes))\n  duration  &lt;- append(duration, durations)\n  \n  ratings &lt;- Html |&gt; html_nodes(\".sc-43986a27-1.fVmjht\")\n  ratings &lt;- html_text(ratings)\n  ratings &lt;- unlist(lapply(ratings, function(ratings){\n    str_sub(ratings, 1, 3)\n  }))\n  rating &lt;- append(rating, as.numeric(ratings))\n  \n  votes &lt;- Html |&gt; html_nodes(\".sc-53c98e73-0.kRnqtn\")\n  votes &lt;- html_text(votes)\n  extract_numeric &lt;- function(string) {\n  numeric_part &lt;- str_extract(string, \"\\\\d[0-9,]+\")\n  numeric_value &lt;- as.numeric(gsub(\",\", \"\", numeric_part))\n  return(numeric_value)\n}\n  votes &lt;- unlist(lapply(votes, extract_numeric))\n  vote  &lt;- append(vote, votes)\n}\nmovies  &lt;- data.frame(title, release_year, duration, rating,vote)\n\nhead(movies)\n\n\n                     title release_year duration rating  vote\n1        Kuru Otlar Üstüne         2023      197    8.1  5063\n2  Istanbul Için Son Çagri         2023       91    5.3  7346\n3 Yedinci Kogustaki Mucize         2019      132    8.2 54155\n4           Ölümlü Dünya 2         2023      117    7.5  3447\n5                   Bihter         2023      113    3.6  3341\n6             Ölümlü Dünya         2018      107    7.6 30260\n\n\nAbove, you can observe the dataframe generated by scraping data from the web.\na) Arranged by Rating\npre-processing\n\n\nCode\nmovies &lt;- movies %&gt;% \n  arrange(desc(rating)) %&gt;%\n  mutate(ranking = c(1: length(title))) %&gt;%\n  select(ranking, everything())\n\n\nHead\nTop 5 movies based on user ratings are shown below.\n\n\nCode\nhead(movies, n = 5L) %&gt;% select(title, rating, vote, release_year)\n\n\n                         title rating  vote release_year\n1               Hababam Sinifi    9.2 42512         1975\n2       CM101MMXI Fundamentals    9.1 46995         2013\n3                   Tosun Pasa    8.9 24327         1976\n4 Hababam Sinifi Sinifta Kaldi    8.9 24370         1975\n5                Süt Kardesler    8.8 20886         1976\n\n\nI believe these movies represent the best in Turkish cinema. They are widely adored, and I personally enjoyed watching each of them. While CM101 MMXI Fundamentals is a stand-up performance rather than a movie, it remains exceptionally popular. In my opinion, Cem Yılmaz is the standout figure in the world of stand-up comedy, making CM101 MMXI Fundamentals a must-see for comedy enthusiasts.\nTail\nThe bottom 5 is shown below.\n\n\nCode\ntail(movies, n = 5L) %&gt;% select(title, rating, vote)\n\n\n                             title rating  vote\n466                 Cumali Ceber 2    1.2 10228\n467                          Müjde    1.2  9920\n468              15/07 Safak Vakti    1.2 20606\n469 Cumali Ceber: Allah Seni Alsin    1.0 39266\n470                           Reis    1.0 73972\n\n\nI recently watched Cumali Ceber, and in my opinion, it stands out as an exceptionally poor movie. It might even be considered the worst in the Turkish film industry. I concur with its low rating. Although I haven’t seen the others, judging by their ratings, I’m inclined to believe they are also of subpar quality, and as a result, I’ve decided not to watch them.\nb) My Favorite Ones\nMy favorite 3 movies, their rankings and ratings are listed below.\n\n\nCode\nmovies %&gt;% \n  filter(title == \"Kolpaçino\" | title == \"Yedinci Kogustaki Mucize\" | title == \"Babam ve Oglum\")\n\n\n  ranking                    title release_year duration rating  vote\n1      23 Yedinci Kogustaki Mucize         2019      132    8.2 54155\n2      27           Babam ve Oglum         2005      108    8.2 91024\n3     271                Kolpaçino         2009       98    6.5 13652\n\n\nc) Visualization\nThe visual representation below illustrates the annual averages of movie ratings, revealing a decline as we approach the present day. It is crucial, however, to take into account the number of movies released, as it directly influences the rating averages.\n\n\nCode\nmovies %&gt;% \n  group_by(release_year) %&gt;%\n  summarize(yearly_average = mean(rating)) %&gt;%\n  ggplot(aes(x = release_year, y = yearly_average)) + geom_point() +\n  ggtitle(\"Yearly Rating Averages\")\n\n\n\n\n\nBelow, you can observe a general increase in the number of movies released over the years.\n\n\nCode\nmovies %&gt;%\n  group_by(release_year) %&gt;%\n  summarize(movie_number = n()) %&gt;%\n  ggplot(aes(x = release_year, y = movie_number)) + geom_point() + ggtitle(\"Number of Movies Over the Year\")\n\n\n\n\n\nBox Plot\n\n\nCode\nmovies %&gt;%\n  ggplot(aes(x = as.factor(release_year), y = rating)) +\n  geom_boxplot() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))+ \n  xlab(\"release_year\")\n\n\n\n\n\nSince 2003, there has been a dramatic increase in the number of movies released, coinciding with relatively lower ratings.\nVote vs Rating\n\n\nCode\nmovies %&gt;%\n  ggplot(aes(x = vote, rating)) + geom_point() +\n  ggtitle(\"Vote vs Rating\")\n\n\n\n\n\nThe majority of votes fall within the range of 0 to 15000, where there is a concentration of ratings above 5.0. It’s noticeable that as the number of votes increases, the ratings tend to be generally high. However, a more in-depth investigation with a larger dataset is necessary to draw definitive conclusions.\nDuration vs Rating\n\n\nCode\nmovies %&gt;%\n  ggplot(aes(x = duration, rating)) + geom_point() +\n  ggtitle(\"Duration vs Rating\")\n\n\n\n\n\nThe durations of the movies tend to accumulate within the range of approximately 75 to 130 minutes. Interestingly, within this range, we observe both high and low ratings. Therefore, there doesn’t appear to be a clear relationship between the duration of the movies and their ratings.\nTurkish Movies in IMDB Top 1000\nWeb-Scrapping\n\n\nCode\nknitr::opts_chunk$set(warning = FALSE)\n\nurl &lt;- \"https://m.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR\"\n\nHtml_ &lt;- read_html(url)\n\ntitle_top &lt;- Html_ |&gt; html_nodes('.ipc-title__text')\ntitle_top &lt;- html_text(title_top)\ntitle_top &lt;- tail(head(title_top,-1),-1)\ntitle_top &lt;- str_split(title_top, \" \", n=2)\ntitle_top &lt;- unlist(lapply(title_top, function(x) {x[2]}))\n\n\nrelease_year_top &lt;- c()\nrelease_years &lt;- Html_ |&gt; html_nodes(\".sc-43986a27-7.dBkaPT.dli-title-metadata\")\nrelease_years &lt;- html_text(release_years)\nrelease_years  &lt;- unlist(lapply(release_years, function(release_years){\n           strtrim(release_years, 4)}))\nrelease_year_top &lt;- append(release_year_top, as.numeric(release_years))\n                          \nmovies_top &lt;- data_frame(title_top, release_year_top)\n\n\nJoining with the original table\n\n\nCode\nleft_join(movies_top, movies, by = c(\"title_top\" = \"title\")) %&gt;%\n  select(-release_year_top) %&gt;% select(ranking, everything()) %&gt;%\n  arrange(desc(rating))\n\n\n# A tibble: 11 × 6\n   ranking title_top                 release_year duration rating  vote\n     &lt;int&gt; &lt;chr&gt;                            &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n 1      20 Ayla: The Daughter of War         2017      125    8.3 42990\n 2      23 Yedinci Kogustaki Mucize          2019      132    8.2 54155\n 3      27 Babam ve Oglum                    2005      108    8.2 91024\n 4      31 Eskiya                            1996      128    8.1 71698\n 5      32 Her Sey Çok Güzel Olacak          1998      107    8.1 27119\n 6      37 Kis Uykusu                        2014      196    8   54633\n 7      40 Nefes: Vatan Sagolsun             2009      128    8   35018\n 8      38 Ahlat Agaci                       2018      188    8   27002\n 9      42 G.O.R.A.                          2004      127    8   66029\n10      44 Vizontele                         2001      110    8   38399\n11      58 Bir Zamanlar Anadolu'da           2011      157    7.8 49352\n\n\nThe ranking reflects the actual positions of these movies within the ‘movies’ dataset. Despite being in the top 1000 list on IMDB, they do not occupy the highest positions in the initial dataframe. This suggests that IMDB employs additional criteria, such as awards received or tickets sold, to order movies in its top 1000 lists.\n\n\n\n\n Back to top"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "B.S., Industrial Engineering, Hacettepe University, Turkey, 2018 - Ongoing."
  },
  {
    "objectID": "about.html#employements",
    "href": "about.html#employements",
    "title": "About Me",
    "section": "Employements",
    "text": "Employements\n\nKuveyt Türk Participation Bank Inc., Candidate Engineer, 2023"
  },
  {
    "objectID": "about.html#internships",
    "href": "about.html#internships",
    "title": "About Me",
    "section": "Internships",
    "text": "Internships\n\nManas Energy Management, Summer Intern, 2022\nİlbank Inc., Summer Intern, 2023"
  },
  {
    "objectID": "assignments/assignment-1.html",
    "href": "assignments/assignment-1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "My first assignment has three parts.\n\n\nSean Lopp | R & Python: Going Steady | RStudio\nThis video touches on an important topic about R and Python. He says he thinks people should definitely choose between R and Python. Actually, we don’t have to choose one at all. A very good example of this is given in the video. This example is as follows:\n“Imagine you’re a craftsman. As a craftsman, you’d probably be familiar with screwdrivers and you might be aware that screwdrivers come in a variety of different shapes and forms. Each of these screwdrivers is designed to serve a specific purpose. Now imagine as a craftsman if you were told that you have to choose for the rest of your career between using one type of screwdriver or another.”This example sounds crazy, doesn’t it? Likewise, data scientists do not have to choose only R and Python throughout their lives. They can choose the easiest and fastest one according to their project and job and work accordingly. Finally, he stops the video by saying the following:\n“My final plea is to pick the people who will make your data science team effective and then supply them with what they need. Don’t make people subservient to tools it should be the other way around allow data science teams to pick whatever language or tool is going to be most effective.”\n\n\n\nDifference 1: Coding style R and Python have different coding styles. R code is typically more concise and expressive, while Python code is more explicit and verbose.\nFor example, to create a vector of numbers in R, you would use the following code:\n\nmy_vector &lt;- c(1, 2, 3, 4, 5)\n\nIn Python, you would use the following code:\n\nmy_vector = [1, 2, 3, 4, 5]\n\nDifference 2: Syntax R and Python also have different syntax. Some of the key differences include:\nVariable assignment: In R, you assign values to variables using the &lt;- operator. In Python, you use the = operator.\nFunction calls: In R, you call functions by enclosing the function name in parentheses, followed by the arguments to the function. In Python, you call functions by writing the function name, followed by the arguments to the function in parentheses.\nConditional statements: In R, you use the if and else keywords to create conditional statements. In Python, you use the if, elif, and else keywords. For example, the following code shows how to create a conditional statement in R and Python:\nR:\n\nif (my_vector[1] &gt; 0) {\n  \n  print(\"The first element in the vector is greater than zero.\")\n\n} else {\n  \n  print(\"The first element in the vector is less than or equal to zero.\")\n}\n\n[1] \"The first element in the vector is greater than zero.\"\n\n\nPython:\n\nif my_vector [0] &gt; 0:\n\n  print(\"The first element in the vector is greater than zero.\")\n\nelse:\n\n  print(\"The first element in the vector is less than or equal to zero.\")\n\nThe first element in the vector is greater than zero.\n\n\nDifference 3: Libraries and packages R and Python have different libraries and packages available for data science. R has a particularly strong focus on statistical analysis, while Python has a more general-purpose focus.\nSome of the most popular R libraries for data science include:\ndplyr: For data manipulation\nggplot2: For data visualization\ncaret: For machine learning\nSome of the most popular Python libraries for data science include:\nnumpy: For scientific computing\npandas: For data manipulation and analysis\nscikit-learn: For machine learning\n\n\n\n\nlibrary(dslabs)\n\n# Load the \"na_example\" data set\ndata(\"na_example\")\n\n# Show the original data set with NA values\nprint(na_example)\n\n   [1]  2  1  3  2  1  3  1  4  3  2  2 NA  2  2  1  4 NA  1  1  2  1  2  2  1\n  [25]  2  5 NA  2  2  3  1  2  4  1  1  1  4  5  2  3  4  1  2  4  1  1  2  1\n  [49]  5 NA NA NA  1  1  5  1  3  1 NA  4  4  7  3  2 NA NA  1 NA  4  1  2  2\n  [73]  3  2  1  2  2  4  3  4  2  3  1  3  2  1  1  1  3  1 NA  3  1  2  2  1\n  [97]  2  2  1  1  4  1  1  2  3  3  2  2  3  3  3  4  1  1  1  2 NA  4  3  4\n [121]  3  1  2  1 NA NA NA NA  1  5  1  2  1  3  5  3  2  2 NA NA NA NA  3  5\n [145]  3  1  1  4  2  4  3  3 NA  2  3  2  6 NA  1  1  2  2  1  3  1  1  5 NA\n [169] NA  2  4 NA  2  5  1  4  3  3 NA  4  3  1  4  1  1  3  1  1 NA NA  3  5\n [193]  2  2  2  3  1  2  2  3  2  1 NA  2 NA  1 NA NA  2  1  1 NA  3 NA  1  2\n [217]  2  1  3  2  2  1  1  2  3  1  1  1  4  3  4  2  2  1  4  1 NA  5  1  4\n [241] NA  3 NA NA  1  1  5  2  3  3  2  4 NA  3  2  5 NA  2  3  4  6  2  2  2\n [265] NA  2 NA  2 NA  3  3  2  2  4  3  1  4  2 NA  2  4 NA  6  2  3  1 NA  2\n [289]  2 NA  1  1  3  2  3  3  1 NA  1  4  2  1  1  3  2  1  2  3  1 NA  2  3\n [313]  3  2  1  2  3  5  5  1  2  3  3  1 NA NA  1  2  4 NA  2  1  1  1  3  2\n [337]  1  1  3  4 NA  1  2  1  1  3  3 NA  1  1  3  5  3  2  3  4  1  4  3  1\n [361] NA  2  1  2  2  1  2  2  6  1  2  4  5 NA  3  4  2  1  1  4  2  1  1  1\n [385]  1  2  1  4  4  1  3 NA  3  3 NA  2 NA  1  2  1  1  4  2  1  4  4 NA  1\n [409]  2 NA  3  2  2  2  1  4  3  6  1  2  3  1  3  2  2  2  1  1  3  2  1  1\n [433]  1  3  2  2 NA  4  4  4  1  1 NA  4  3 NA  1  3  1  3  2  4  2  2  2  3\n [457]  2  1  4  3 NA  1  4  3  1  3  2 NA  3 NA  1  3  1  4  1  1  1  2  4  3\n [481]  1  2  2  2  3  2  3  1  1 NA  3  2  1  1  2 NA  2  2  2  3  3  1  1  2\n [505] NA  1  2  1  1  3  3  1  3  1  1  1  1  1  2  5  1  1  2  2  1  1 NA  1\n [529]  4  1  2  4  1  3  2 NA  1  1 NA  2  1  1  4  2  3  3  1  5  3  1  1  2\n [553] NA  1  1  3  1  3  2  4 NA  2  3  2  1  2  1  1  1  2  2  3  1  5  2 NA\n [577]  2 NA  3  2  2  2  1  5  3  2  3  1 NA  3  1  2  2  2  1  2  2  4 NA  6\n [601]  1  2 NA  1  1  2  2  3 NA  3  2  3  3  4  2 NA  2 NA  4 NA  1  1  2  2\n [625]  3  1  1  1  3 NA  2  5 NA  7  1 NA  4  3  3  1 NA  1  1  1  1  3  2  4\n [649]  2  2  3 NA NA  1  4  3  2  2  2  3  2  4  2  2  4 NA NA NA  6  3  3  1\n [673]  4  4  2  1 NA  1  6 NA  3  3  2  1  1  6 NA  1  5  1 NA  2  6  2 NA  4\n [697]  1  3  1  2 NA  1  1  3  1  2  4  2  1  3  2  4  3  2  2  1  1  5  6  4\n [721]  2  2  2  2  4 NA  1  2  2  2  2  4  5 NA NA NA  4  3  3  3  2  4  2  4\n [745] NA NA NA NA  2  1 NA  2  4  3  2 NA  2  3  1  3  4 NA  1  2  1  2 NA  3\n [769]  1  2  1  2  1  2  1  2  2  2  2  1  1  3  3  1  3  4  3 NA NA  4  2  3\n [793]  2  1  3  2  4  2  2  3  1  2  4  3  3  4 NA  1  4  2  1  1  1  3  1  5\n [817]  2  2  4  2 NA  1  3  1  2 NA  1  2  1  2  1 NA  1  3  2  3  2 NA  2  1\n [841]  4  2 NA NA NA  2  4  2 NA NA  3  1 NA  5  5  2  2  2 NA  2  1  3  1  3\n [865]  2  4  2  4 NA  4  1  2  3  2  3  3  2  3  2  2  2  1  3  2  4  2 NA  3\n [889]  3  2  2 NA NA  3  2  1  2  4  1  1  1  1  4  3  2 NA  3  2 NA  1 NA  3\n [913]  2  1  1  1  2 NA  2  2  3  3  2 NA NA  4  5  2  2  2  1  2  3  1  3  3\n [937]  4  3 NA  1  1  1 NA  4  3  5  1  1  2 NA  2  2  2  2  5  2  2  3  1  2\n [961]  3 NA  1  2 NA NA  2 NA  3  1  1  2  5  3  5  1  1  4 NA  2  1  3  1  1\n [985]  2  4  3  3  3 NA  1  1  2  2  1  1  2  2 NA  2\n\n# Count the total number of NAs in the original data set\ntotal_nas_original &lt;- sum(is.na(na_example))\nprint(total_nas_original)\n\n[1] 145\n\n# Replace NAs with 0 and store in a new data frame\nna_example_no_na &lt;- na_example\nna_example_no_na[is.na(na_example_no_na)] &lt;- 0\n\n# Show the new data set without NAs\nprint(na_example_no_na)\n\n   [1] 2 1 3 2 1 3 1 4 3 2 2 0 2 2 1 4 0 1 1 2 1 2 2 1 2 5 0 2 2 3 1 2 4 1 1 1 4\n  [38] 5 2 3 4 1 2 4 1 1 2 1 5 0 0 0 1 1 5 1 3 1 0 4 4 7 3 2 0 0 1 0 4 1 2 2 3 2\n  [75] 1 2 2 4 3 4 2 3 1 3 2 1 1 1 3 1 0 3 1 2 2 1 2 2 1 1 4 1 1 2 3 3 2 2 3 3 3\n [112] 4 1 1 1 2 0 4 3 4 3 1 2 1 0 0 0 0 1 5 1 2 1 3 5 3 2 2 0 0 0 0 3 5 3 1 1 4\n [149] 2 4 3 3 0 2 3 2 6 0 1 1 2 2 1 3 1 1 5 0 0 2 4 0 2 5 1 4 3 3 0 4 3 1 4 1 1\n [186] 3 1 1 0 0 3 5 2 2 2 3 1 2 2 3 2 1 0 2 0 1 0 0 2 1 1 0 3 0 1 2 2 1 3 2 2 1\n [223] 1 2 3 1 1 1 4 3 4 2 2 1 4 1 0 5 1 4 0 3 0 0 1 1 5 2 3 3 2 4 0 3 2 5 0 2 3\n [260] 4 6 2 2 2 0 2 0 2 0 3 3 2 2 4 3 1 4 2 0 2 4 0 6 2 3 1 0 2 2 0 1 1 3 2 3 3\n [297] 1 0 1 4 2 1 1 3 2 1 2 3 1 0 2 3 3 2 1 2 3 5 5 1 2 3 3 1 0 0 1 2 4 0 2 1 1\n [334] 1 3 2 1 1 3 4 0 1 2 1 1 3 3 0 1 1 3 5 3 2 3 4 1 4 3 1 0 2 1 2 2 1 2 2 6 1\n [371] 2 4 5 0 3 4 2 1 1 4 2 1 1 1 1 2 1 4 4 1 3 0 3 3 0 2 0 1 2 1 1 4 2 1 4 4 0\n [408] 1 2 0 3 2 2 2 1 4 3 6 1 2 3 1 3 2 2 2 1 1 3 2 1 1 1 3 2 2 0 4 4 4 1 1 0 4\n [445] 3 0 1 3 1 3 2 4 2 2 2 3 2 1 4 3 0 1 4 3 1 3 2 0 3 0 1 3 1 4 1 1 1 2 4 3 1\n [482] 2 2 2 3 2 3 1 1 0 3 2 1 1 2 0 2 2 2 3 3 1 1 2 0 1 2 1 1 3 3 1 3 1 1 1 1 1\n [519] 2 5 1 1 2 2 1 1 0 1 4 1 2 4 1 3 2 0 1 1 0 2 1 1 4 2 3 3 1 5 3 1 1 2 0 1 1\n [556] 3 1 3 2 4 0 2 3 2 1 2 1 1 1 2 2 3 1 5 2 0 2 0 3 2 2 2 1 5 3 2 3 1 0 3 1 2\n [593] 2 2 1 2 2 4 0 6 1 2 0 1 1 2 2 3 0 3 2 3 3 4 2 0 2 0 4 0 1 1 2 2 3 1 1 1 3\n [630] 0 2 5 0 7 1 0 4 3 3 1 0 1 1 1 1 3 2 4 2 2 3 0 0 1 4 3 2 2 2 3 2 4 2 2 4 0\n [667] 0 0 6 3 3 1 4 4 2 1 0 1 6 0 3 3 2 1 1 6 0 1 5 1 0 2 6 2 0 4 1 3 1 2 0 1 1\n [704] 3 1 2 4 2 1 3 2 4 3 2 2 1 1 5 6 4 2 2 2 2 4 0 1 2 2 2 2 4 5 0 0 0 4 3 3 3\n [741] 2 4 2 4 0 0 0 0 2 1 0 2 4 3 2 0 2 3 1 3 4 0 1 2 1 2 0 3 1 2 1 2 1 2 1 2 2\n [778] 2 2 1 1 3 3 1 3 4 3 0 0 4 2 3 2 1 3 2 4 2 2 3 1 2 4 3 3 4 0 1 4 2 1 1 1 3\n [815] 1 5 2 2 4 2 0 1 3 1 2 0 1 2 1 2 1 0 1 3 2 3 2 0 2 1 4 2 0 0 0 2 4 2 0 0 3\n [852] 1 0 5 5 2 2 2 0 2 1 3 1 3 2 4 2 4 0 4 1 2 3 2 3 3 2 3 2 2 2 1 3 2 4 2 0 3\n [889] 3 2 2 0 0 3 2 1 2 4 1 1 1 1 4 3 2 0 3 2 0 1 0 3 2 1 1 1 2 0 2 2 3 3 2 0 0\n [926] 4 5 2 2 2 1 2 3 1 3 3 4 3 0 1 1 1 0 4 3 5 1 1 2 0 2 2 2 2 5 2 2 3 1 2 3 0\n [963] 1 2 0 0 2 0 3 1 1 2 5 3 5 1 1 4 0 2 1 3 1 1 2 4 3 3 3 0 1 1 2 2 1 1 2 2 0\n[1000] 2\n\n# Count the total number of NAs in the new data set\ntotal_nas_new &lt;- sum(is.na(na_example_no_na))\nprint(total_nas_new)\n\n[1] 0"
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "My Assignments",
    "section": "",
    "text": "On this page, I showcase the assignment I conducted for the Fall 2023, EMU 430 Data Analytics course.\nPlease use left menu to navigate through my assignments.\nThe most recent update to this page was made on December 28, 2023\n\n\n\n Back to top"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "My Blog",
    "section": "",
    "text": "This page is under construction. I will continue.\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments/assignment-1.html#a",
    "href": "assignments/assignment-1.html#a",
    "title": "Assignment 1",
    "section": "",
    "text": "Sean Lopp | R & Python: Going Steady | RStudio\nThis video touches on an important topic about R and Python. He says he thinks people should definitely choose between R and Python. Actually, we don’t have to choose one at all. A very good example of this is given in the video. This example is as follows:\n“Imagine you’re a craftsman. As a craftsman, you’d probably be familiar with screwdrivers and you might be aware that screwdrivers come in a variety of different shapes and forms. Each of these screwdrivers is designed to serve a specific purpose. Now imagine as a craftsman if you were told that you have to choose for the rest of your career between using one type of screwdriver or another.”This example sounds crazy, doesn’t it? Likewise, data scientists do not have to choose only R and Python throughout their lives. They can choose the easiest and fastest one according to their project and job and work accordingly. Finally, he stops the video by saying the following:\n“My final plea is to pick the people who will make your data science team effective and then supply them with what they need. Don’t make people subservient to tools it should be the other way around allow data science teams to pick whatever language or tool is going to be most effective.”"
  },
  {
    "objectID": "assignments/assignment-1.html#b",
    "href": "assignments/assignment-1.html#b",
    "title": "Assignment 1",
    "section": "",
    "text": "Difference 1: Coding style R and Python have different coding styles. R code is typically more concise and expressive, while Python code is more explicit and verbose.\nFor example, to create a vector of numbers in R, you would use the following code:\n\nmy_vector &lt;- c(1, 2, 3, 4, 5)\n\nIn Python, you would use the following code:\n\nmy_vector = [1, 2, 3, 4, 5]\n\nDifference 2: Syntax R and Python also have different syntax. Some of the key differences include:\nVariable assignment: In R, you assign values to variables using the &lt;- operator. In Python, you use the = operator.\nFunction calls: In R, you call functions by enclosing the function name in parentheses, followed by the arguments to the function. In Python, you call functions by writing the function name, followed by the arguments to the function in parentheses.\nConditional statements: In R, you use the if and else keywords to create conditional statements. In Python, you use the if, elif, and else keywords. For example, the following code shows how to create a conditional statement in R and Python:\nR:\n\nif (my_vector[1] &gt; 0) {\n  \n  print(\"The first element in the vector is greater than zero.\")\n\n} else {\n  \n  print(\"The first element in the vector is less than or equal to zero.\")\n}\n\n[1] \"The first element in the vector is greater than zero.\"\n\n\nPython:\n\nif my_vector [0] &gt; 0:\n\n  print(\"The first element in the vector is greater than zero.\")\n\nelse:\n\n  print(\"The first element in the vector is less than or equal to zero.\")\n\nThe first element in the vector is greater than zero.\n\n\nDifference 3: Libraries and packages R and Python have different libraries and packages available for data science. R has a particularly strong focus on statistical analysis, while Python has a more general-purpose focus.\nSome of the most popular R libraries for data science include:\ndplyr: For data manipulation\nggplot2: For data visualization\ncaret: For machine learning\nSome of the most popular Python libraries for data science include:\nnumpy: For scientific computing\npandas: For data manipulation and analysis\nscikit-learn: For machine learning"
  },
  {
    "objectID": "assignments/assignment-1.html#c",
    "href": "assignments/assignment-1.html#c",
    "title": "Assignment 1",
    "section": "",
    "text": "library(dslabs)\n\n# Load the \"na_example\" data set\ndata(\"na_example\")\n\n# Show the original data set with NA values\nprint(na_example)\n\n   [1]  2  1  3  2  1  3  1  4  3  2  2 NA  2  2  1  4 NA  1  1  2  1  2  2  1\n  [25]  2  5 NA  2  2  3  1  2  4  1  1  1  4  5  2  3  4  1  2  4  1  1  2  1\n  [49]  5 NA NA NA  1  1  5  1  3  1 NA  4  4  7  3  2 NA NA  1 NA  4  1  2  2\n  [73]  3  2  1  2  2  4  3  4  2  3  1  3  2  1  1  1  3  1 NA  3  1  2  2  1\n  [97]  2  2  1  1  4  1  1  2  3  3  2  2  3  3  3  4  1  1  1  2 NA  4  3  4\n [121]  3  1  2  1 NA NA NA NA  1  5  1  2  1  3  5  3  2  2 NA NA NA NA  3  5\n [145]  3  1  1  4  2  4  3  3 NA  2  3  2  6 NA  1  1  2  2  1  3  1  1  5 NA\n [169] NA  2  4 NA  2  5  1  4  3  3 NA  4  3  1  4  1  1  3  1  1 NA NA  3  5\n [193]  2  2  2  3  1  2  2  3  2  1 NA  2 NA  1 NA NA  2  1  1 NA  3 NA  1  2\n [217]  2  1  3  2  2  1  1  2  3  1  1  1  4  3  4  2  2  1  4  1 NA  5  1  4\n [241] NA  3 NA NA  1  1  5  2  3  3  2  4 NA  3  2  5 NA  2  3  4  6  2  2  2\n [265] NA  2 NA  2 NA  3  3  2  2  4  3  1  4  2 NA  2  4 NA  6  2  3  1 NA  2\n [289]  2 NA  1  1  3  2  3  3  1 NA  1  4  2  1  1  3  2  1  2  3  1 NA  2  3\n [313]  3  2  1  2  3  5  5  1  2  3  3  1 NA NA  1  2  4 NA  2  1  1  1  3  2\n [337]  1  1  3  4 NA  1  2  1  1  3  3 NA  1  1  3  5  3  2  3  4  1  4  3  1\n [361] NA  2  1  2  2  1  2  2  6  1  2  4  5 NA  3  4  2  1  1  4  2  1  1  1\n [385]  1  2  1  4  4  1  3 NA  3  3 NA  2 NA  1  2  1  1  4  2  1  4  4 NA  1\n [409]  2 NA  3  2  2  2  1  4  3  6  1  2  3  1  3  2  2  2  1  1  3  2  1  1\n [433]  1  3  2  2 NA  4  4  4  1  1 NA  4  3 NA  1  3  1  3  2  4  2  2  2  3\n [457]  2  1  4  3 NA  1  4  3  1  3  2 NA  3 NA  1  3  1  4  1  1  1  2  4  3\n [481]  1  2  2  2  3  2  3  1  1 NA  3  2  1  1  2 NA  2  2  2  3  3  1  1  2\n [505] NA  1  2  1  1  3  3  1  3  1  1  1  1  1  2  5  1  1  2  2  1  1 NA  1\n [529]  4  1  2  4  1  3  2 NA  1  1 NA  2  1  1  4  2  3  3  1  5  3  1  1  2\n [553] NA  1  1  3  1  3  2  4 NA  2  3  2  1  2  1  1  1  2  2  3  1  5  2 NA\n [577]  2 NA  3  2  2  2  1  5  3  2  3  1 NA  3  1  2  2  2  1  2  2  4 NA  6\n [601]  1  2 NA  1  1  2  2  3 NA  3  2  3  3  4  2 NA  2 NA  4 NA  1  1  2  2\n [625]  3  1  1  1  3 NA  2  5 NA  7  1 NA  4  3  3  1 NA  1  1  1  1  3  2  4\n [649]  2  2  3 NA NA  1  4  3  2  2  2  3  2  4  2  2  4 NA NA NA  6  3  3  1\n [673]  4  4  2  1 NA  1  6 NA  3  3  2  1  1  6 NA  1  5  1 NA  2  6  2 NA  4\n [697]  1  3  1  2 NA  1  1  3  1  2  4  2  1  3  2  4  3  2  2  1  1  5  6  4\n [721]  2  2  2  2  4 NA  1  2  2  2  2  4  5 NA NA NA  4  3  3  3  2  4  2  4\n [745] NA NA NA NA  2  1 NA  2  4  3  2 NA  2  3  1  3  4 NA  1  2  1  2 NA  3\n [769]  1  2  1  2  1  2  1  2  2  2  2  1  1  3  3  1  3  4  3 NA NA  4  2  3\n [793]  2  1  3  2  4  2  2  3  1  2  4  3  3  4 NA  1  4  2  1  1  1  3  1  5\n [817]  2  2  4  2 NA  1  3  1  2 NA  1  2  1  2  1 NA  1  3  2  3  2 NA  2  1\n [841]  4  2 NA NA NA  2  4  2 NA NA  3  1 NA  5  5  2  2  2 NA  2  1  3  1  3\n [865]  2  4  2  4 NA  4  1  2  3  2  3  3  2  3  2  2  2  1  3  2  4  2 NA  3\n [889]  3  2  2 NA NA  3  2  1  2  4  1  1  1  1  4  3  2 NA  3  2 NA  1 NA  3\n [913]  2  1  1  1  2 NA  2  2  3  3  2 NA NA  4  5  2  2  2  1  2  3  1  3  3\n [937]  4  3 NA  1  1  1 NA  4  3  5  1  1  2 NA  2  2  2  2  5  2  2  3  1  2\n [961]  3 NA  1  2 NA NA  2 NA  3  1  1  2  5  3  5  1  1  4 NA  2  1  3  1  1\n [985]  2  4  3  3  3 NA  1  1  2  2  1  1  2  2 NA  2\n\n# Count the total number of NAs in the original data set\ntotal_nas_original &lt;- sum(is.na(na_example))\nprint(total_nas_original)\n\n[1] 145\n\n# Replace NAs with 0 and store in a new data frame\nna_example_no_na &lt;- na_example\nna_example_no_na[is.na(na_example_no_na)] &lt;- 0\n\n# Show the new data set without NAs\nprint(na_example_no_na)\n\n   [1] 2 1 3 2 1 3 1 4 3 2 2 0 2 2 1 4 0 1 1 2 1 2 2 1 2 5 0 2 2 3 1 2 4 1 1 1 4\n  [38] 5 2 3 4 1 2 4 1 1 2 1 5 0 0 0 1 1 5 1 3 1 0 4 4 7 3 2 0 0 1 0 4 1 2 2 3 2\n  [75] 1 2 2 4 3 4 2 3 1 3 2 1 1 1 3 1 0 3 1 2 2 1 2 2 1 1 4 1 1 2 3 3 2 2 3 3 3\n [112] 4 1 1 1 2 0 4 3 4 3 1 2 1 0 0 0 0 1 5 1 2 1 3 5 3 2 2 0 0 0 0 3 5 3 1 1 4\n [149] 2 4 3 3 0 2 3 2 6 0 1 1 2 2 1 3 1 1 5 0 0 2 4 0 2 5 1 4 3 3 0 4 3 1 4 1 1\n [186] 3 1 1 0 0 3 5 2 2 2 3 1 2 2 3 2 1 0 2 0 1 0 0 2 1 1 0 3 0 1 2 2 1 3 2 2 1\n [223] 1 2 3 1 1 1 4 3 4 2 2 1 4 1 0 5 1 4 0 3 0 0 1 1 5 2 3 3 2 4 0 3 2 5 0 2 3\n [260] 4 6 2 2 2 0 2 0 2 0 3 3 2 2 4 3 1 4 2 0 2 4 0 6 2 3 1 0 2 2 0 1 1 3 2 3 3\n [297] 1 0 1 4 2 1 1 3 2 1 2 3 1 0 2 3 3 2 1 2 3 5 5 1 2 3 3 1 0 0 1 2 4 0 2 1 1\n [334] 1 3 2 1 1 3 4 0 1 2 1 1 3 3 0 1 1 3 5 3 2 3 4 1 4 3 1 0 2 1 2 2 1 2 2 6 1\n [371] 2 4 5 0 3 4 2 1 1 4 2 1 1 1 1 2 1 4 4 1 3 0 3 3 0 2 0 1 2 1 1 4 2 1 4 4 0\n [408] 1 2 0 3 2 2 2 1 4 3 6 1 2 3 1 3 2 2 2 1 1 3 2 1 1 1 3 2 2 0 4 4 4 1 1 0 4\n [445] 3 0 1 3 1 3 2 4 2 2 2 3 2 1 4 3 0 1 4 3 1 3 2 0 3 0 1 3 1 4 1 1 1 2 4 3 1\n [482] 2 2 2 3 2 3 1 1 0 3 2 1 1 2 0 2 2 2 3 3 1 1 2 0 1 2 1 1 3 3 1 3 1 1 1 1 1\n [519] 2 5 1 1 2 2 1 1 0 1 4 1 2 4 1 3 2 0 1 1 0 2 1 1 4 2 3 3 1 5 3 1 1 2 0 1 1\n [556] 3 1 3 2 4 0 2 3 2 1 2 1 1 1 2 2 3 1 5 2 0 2 0 3 2 2 2 1 5 3 2 3 1 0 3 1 2\n [593] 2 2 1 2 2 4 0 6 1 2 0 1 1 2 2 3 0 3 2 3 3 4 2 0 2 0 4 0 1 1 2 2 3 1 1 1 3\n [630] 0 2 5 0 7 1 0 4 3 3 1 0 1 1 1 1 3 2 4 2 2 3 0 0 1 4 3 2 2 2 3 2 4 2 2 4 0\n [667] 0 0 6 3 3 1 4 4 2 1 0 1 6 0 3 3 2 1 1 6 0 1 5 1 0 2 6 2 0 4 1 3 1 2 0 1 1\n [704] 3 1 2 4 2 1 3 2 4 3 2 2 1 1 5 6 4 2 2 2 2 4 0 1 2 2 2 2 4 5 0 0 0 4 3 3 3\n [741] 2 4 2 4 0 0 0 0 2 1 0 2 4 3 2 0 2 3 1 3 4 0 1 2 1 2 0 3 1 2 1 2 1 2 1 2 2\n [778] 2 2 1 1 3 3 1 3 4 3 0 0 4 2 3 2 1 3 2 4 2 2 3 1 2 4 3 3 4 0 1 4 2 1 1 1 3\n [815] 1 5 2 2 4 2 0 1 3 1 2 0 1 2 1 2 1 0 1 3 2 3 2 0 2 1 4 2 0 0 0 2 4 2 0 0 3\n [852] 1 0 5 5 2 2 2 0 2 1 3 1 3 2 4 2 4 0 4 1 2 3 2 3 3 2 3 2 2 2 1 3 2 4 2 0 3\n [889] 3 2 2 0 0 3 2 1 2 4 1 1 1 1 4 3 2 0 3 2 0 1 0 3 2 1 1 1 2 0 2 2 3 3 2 0 0\n [926] 4 5 2 2 2 1 2 3 1 3 3 4 3 0 1 1 1 0 4 3 5 1 1 2 0 2 2 2 2 5 2 2 3 1 2 3 0\n [963] 1 2 0 0 2 0 3 1 1 2 5 3 5 1 1 4 0 2 1 3 1 1 2 4 3 3 3 0 1 1 2 2 1 1 2 2 0\n[1000] 2\n\n# Count the total number of NAs in the new data set\ntotal_nas_new &lt;- sum(is.na(na_example_no_na))\nprint(total_nas_new)\n\n[1] 0"
  }
]